# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from __python__ import bound_methods
from book_list.globals import get_session_data
from elementmaker import E
from gettext import gettext as _
from read_book.globals import messenger, iframe_id
from read_book.resources import load_resources
from read_book.overlay import Overlay

LOADING_DOC = '''
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<script type="text/javascript" id="bootstrap">
__SCRIPT__
end_script
</head>
<body>
<div style="font-family: sans-serif; font-size:larger; font-weight: bold; margin-top:48vh; text-align:center">
__BS__
</div>
</body>
</html>
'''.replace('end_script', '<' + '/script>')  # cannot have a closing script tag as this is embedded inside a script tag in index.html

class View:

    def __init__(self, container, ui):
        self.ui = ui
        self.loaded_resources = {}
        sd = get_session_data()
        container.appendChild(
            E.div(style='width: 100vw; height: 100vh; overflow: hidden; display: flex; align-items: stretch',  # container for horizontally aligned panels
                  E.div(style='display: flex; flex-direction: column; align-items: stretch; flex-grow:2',  # container for iframe and any other panels in the same column
                    E.div(style='flex-grow: 2; display:flex; align-items: stretch',  # container for iframe and its overlay
                        E.div(style='width:{}px; height:100%'.format(sd.get('margin_side', 20)), id='book-left-margin'),
                        E.div(style='flex-grow:2; display:flex; align-items:stretch; flex-direction: column', # container for top and bottom margins
                            E.div(style='height:{}px; width:100%'.format(sd.get('margin_top', 20)), id='book-top-margin'),
                            E.iframe(id=iframe_id, seamless=True, sandbox='allow-popups allow-scripts', style='flex-grow: 2'),
                            E.div(style='height:{}px; width:100%'.format(sd.get('margin_bottom', 20)), id='book-bottom-margin'),
                        ),
                        E.div(style='width:{}px; height:100%'.format(sd.get('margin_side', 20)), id='book-right-margin'),
                        E.div(style='position: absolute; top:0; left:0; width: 100%; height: 100%; display:none', id='book-overlay'),  # overlay
                    )
                )
            )
        )
        self.overlay = Overlay(self)
        self.src_doc = None
        self.iframe_ready = False
        self.pending_load = None
        self.encrypted_communications = False
        self.create_src_doc()
        window.addEventListener('message', self.handle_message, False)
        self.handlers = {
            'ready': self.on_iframe_ready,
            'error': self.on_iframe_error,
            'next_spine_item': self.on_next_spine_item,
            'goto_doc_boundary': self.goto_doc_boundary,
        }
        self.currently_showing = {'spine':0, 'cfi':None}

    @property
    def iframe(self):
        return document.getElementById(iframe_id)

    def set_margins(self, margin_side=None, margin_top=None, margin_bottom=None):
        sd = get_session_data()
        margin_side = sd.get('margin_side') if margin_side is None else margin_side
        margin_top = sd.get('margin_top') if margin_top is None else margin_top
        margin_bottom = sd.get('margin_bottom') if margin_bottom is None else margin_bottom
        document.getElementById('book-left-margin').style.width = margin_side + 'px'
        document.getElementById('book-right-margin').style.width = margin_side + 'px'
        document.getElementById('book-top-margin').style.height = margin_top + 'px'
        document.getElementById('book-bottom-margin').style.height = margin_bottom + 'px'

    def create_src_doc(self):
        iframe_script = self.ui.interface_data.main_js.replace(/is_running_in_iframe\s*=\s*false/, 'is_running_in_iframe = true')
        self.ui.interface_data.main_js = None
        self.src_doc = self.iframe.srcdoc = LOADING_DOC.replace(
            '__BS__', _('Bootstrapping book reader...')).replace(
            '__SCRIPT__', iframe_script)

    def init_iframe(self, iframe_script):
        self.encrypted_communications = False
        self.iframe.srcdoc = self.src_doc

    def send_message(self, action, **data):
        data.action = action
        if self.encrypted_communications:
            data = messenger.encrypt(data)
        self.iframe.contentWindow.postMessage(data, '*')

    def handle_message(self, event):
        if event.source is not self.iframe.contentWindow:
            return
        data = event.data
        if self.encrypted_communications:
            try:
                data = messenger.decrypt(data)
            except Exception as e:
                print('Could not process message from iframe:')
                console.log(e)
                return
        func = self.handlers[data.action]
        if func:
            func(data)
        else:
            print('Unknown action in message from iframe to parent: ' + data.action)

    def on_iframe_ready(self, data):
        messenger.reset()
        self.send_message('initialize', 'secret'=messenger.secret, 'translations'=self.ui.interface_data.translations)
        self.iframe_ready = True
        if self.pending_load:
            data = self.pending_load
            self.pending_load = None
            self.show_spine_item_stage2(data)

    def on_iframe_error(self, data):
        self.ui.show_error((data.title or _('There was an error processing the book')), data.msg, data.details)

    def on_resize(self):
        pass

    def show_loading(self, title):
        return  # TODO: Implement this

    def display_book(self, book):
        self.book = book
        self.show_loading(book.metadata.title)
        self.ui.db.update_last_read_time(book)
        # TODO: Check for last open position of book
        self.show_name(book.manifest.spine[1])

    def show_name(self, name, initial_scroll_fraction=None, cfi=None):
        if self.currently_showing.loading:
            return
        self.currently_showing = {'name':name, 'cfi':cfi, 'initial_scroll_fraction':initial_scroll_fraction, 'loading':True}
        self.set_margins(0, 0, 0) if name is self.book.manifest.title_page_name else self.set_margins()
        load_resources(self.ui.db, self.book, name, self.loaded_resources, self.show_spine_item)

    def goto_doc_boundary(self, data):
        name = self.book.manifest.spine[0 if data.start else self.book.manifest.spine.length - 1]
        self.show_name(name, initial_scroll_fraction=0 if data.start else 1)

    def on_next_spine_item(self, data):
        spine = self.book.manifest.spine
        idx = spine.indexOf(self.currently_showing.name)
        if data.previous:
            if idx is 0:
                return
            idx = min(spine.length - 1, max(idx - 1, 0))
            self.show_name(spine[idx], initial_scroll_fraction=1)
        else:
            if idx is spine.length - 1:
                return
            idx = max(0, min(spine.length - 1, idx + 1))
            self.show_name(spine[idx])

    def show_spine_item(self, resource_data):
        self.loaded_resources = resource_data
        # Re-init the iframe to ensure any changes made to the environment by the last spine item are lost
        self.init_iframe()
        # Now wait for iframe to message that it is ready
        self.pending_load = resource_data

    def show_spine_item_stage2(self, resource_data):
        self.currently_showing.loading = False
        self.send_message('display', resource_data=resource_data, book=self.book, name=self.currently_showing.name,
                          initial_scroll_fraction=self.currently_showing.initial_scroll_fraction)
        self.encrypted_communications = True
