# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import bound_methods

import traceback
from aes import GCM
from gettext import install
from read_book.globals import set_boss, set_current_spine_item, current_layout_mode, current_spine_item
from read_book.resources import finalize_resources, unserialize_html
from read_book.flow_mode import flow_to_scroll_fraction, flow_onwheel, flow_onkeydown
from utils import debounce

class Boss:

    def __init__(self):
        self.ready_sent = False
        self.encrypted_communications = False
        window.addEventListener('message', self.handle_message, False)
        window.addEventListener('load', def():
            if not self.ready_sent:
                self.send_message('ready')
                self.ready_sent = True
        )
        set_boss(self)
        self.handlers = {
            'initialize':self.initialize,
            'display': self.display,
        }
        self.last_window_ypos = 0

    def handle_message(self, event):
        if event.source is not window.parent:
            return
        data = event.data
        if self.encrypted_communications:
            try:
                data = JSON.parse(self.gcm_from_parent.decrypt(data))
            except Exception as e:
                print('Could not process message from parent:')
                console.log(e)
                return
        func = self.handlers[data.action]
        if func:
            try:
                func(data)
            except Exception as e:
                console.log('Error in iframe message handler:')
                console.log(e)
                self.send_message('error', details=traceback.format_exc(), msg=e.toString())
        else:
            print('Unknown action in message to iframe from parent: ' + data.action)

    def initialize(self, data):
        self.gcm_from_parent, self.gcm_to_parent = GCM(data.secret.subarray(0, 32)), GCM(data.secret.subarray(32))
        if data.translations:
            install(data.translations)

    def display(self, data):
        self.encrypted_communications = True
        self.book = data.book
        spine = self.book.manifest.spine
        index = spine.indexOf(data.name)
        set_current_spine_item({'name':data.name, 'is_first':index is 0, 'is_last':index is spine.length - 1, 'initial_scroll_fraction':data.initial_scroll_fraction})
        root_data = finalize_resources(self.book, data.name, data.resource_data)
        unserialize_html(root_data, self.content_loaded)

    def content_loaded(self):
        document.documentElement.style.overflow = 'hidden'
        window.addEventListener('scroll', debounce(self.update_cfi, 1000))
        window.addEventListener('resize', debounce(self.onresize, 500))
        window.addEventListener('wheel', self.onwheel)
        window.addEventListener('keydown', self.onkeydown)
        csi = current_spine_item()
        if csi.initial_scroll_fraction is not None:
            if current_layout_mode() is 'flow':
                flow_to_scroll_fraction(csi.initial_scroll_fraction)

    def update_cfi(self):
        pass  # TODO: Update CFI

    def onresize(self):
        self.update_cfi()

    def onwheel(self, evt):
        evt.preventDefault()
        if current_layout_mode() is 'flow':
            flow_onwheel(evt)

    def onkeydown(self, evt):
        if current_layout_mode() is 'flow':
            flow_onkeydown(evt)

    def send_message(self, action, **data):
        data.action = action
        if self.encrypted_communications:
            data = self.gcm_to_parent.encrypt(JSON.stringify(data))
        window.parent.postMessage(data, '*')


def init():
    script = document.getElementById('bootstrap')
    script.parentNode.removeChild(script)  # free up some memory
    Boss()
