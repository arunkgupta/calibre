#!/usr/bin/env python2
from __future__ import (unicode_literals, division, absolute_import,
                        print_function)

__license__   = 'GPL v3'
__copyright__ = '2013, Kovid Goyal <kovid@kovidgoyal.net>'

'''
time.com
'''

from calibre.web.feeds.jsnews import JavascriptRecipe
from calibre.ptempfile import PersistentTemporaryFile
from lxml import html
import json

# Keep the login method as standalone, so it can be easily tested
def do_login(browser, username, password):
    from calibre.web.jsbrowser.browser import Timeout
    browser.visit(
        'http://subscription-assets.time.com/prod/assets/themes/magazines/SUBS/templates/velocity/site/td-pcslogin/login.html')
    form = browser.select_form('#sign-in-form')
    form['username'] = username
    form['password'] = password
    browser.submit('#sign-in-button')
    try:
        browser.wait_for_element('body.is-signed-in', timeout=180)
    except Timeout:
        raise ValueError(
            'Failed to login to time.com, check your username and password and try again in a little while.')

class Time(JavascriptRecipe):
    title                 = u'Time'
    __author__            = 'Kovid Goyal'
    description           = 'Weekly US magazine.'
    language              = 'en'
    needs_subscription    = True
    requires_version      = (0, 9, 35)

    no_stylesheets        = True
    remove_javascript     = True
    time_initial_phase = True

    def do_login(self, browser, username, password):
        do_login(browser, username, password)

    def print_version(self, url):
        return self.turl_map[url]

    def get_publication_data(self, browser):
        # raw = open('/t/time.html', 'rb').read().decode('utf-8')
        browser.visit('http://time.com/magazine')
        raw = browser.html

        root = html.fromstring(raw)
        self.time_initial_phase = False
        dates = ''.join(root.xpath('//*[@class="rail-article-magazine-issue"]/date/text()'))
        if dates:
            self.timefmt = ' [%s]'%dates

        for script in root.iterdescendants('script'):
            if script.text and script.text.startswith('Time.bootstrap ='):
                data = json.loads(script.text.partition('=')[2].lstrip())
                break
        else:
            raise ValueError('The time website has changed, this recipe needs to be rewritten')
        data = data['magazine']['us'][0]
        self.turl_map = {}
        ans = {}
        articles = []
        for article in data['articles']:
            title = article.get('friendly_title') or article.get('short_title')
            if title == 'In the Latest Issue':
                continue
            url = article['shortlink']
            desc = article.get('excerpt') or ''
            self.log(title, ' at ', url)
            self.log('\t', desc)
            try:
                cover_url = article['hero']['src']['large']
            except Exception:
                cover_url = ''
            authors = ''
            for aut in article.get('authors') or ():
                authors += '<p>' + aut.get('bio') + '</p>'
            articles.append({'title':title, 'url':url, 'desc':desc})
            text = '<html><head><meta charset="utf-8"></head><body><h1>{}</h1>{}<div><img src={}></div><div>{}</div></body></html>'.format(
                title, authors, cover_url, article['content'])
            with PersistentTemporaryFile('-time-recipe.html') as f:
                f.write(text.encode('utf-8'))
            self.turl_map[url] = 'file:///' + f.name
        # from pprint import pprint
        # pprint(data['hero'])

        ans['cover'] = browser.get_resource(data['hero']['src']['large'])
        ans['index'] = [('Articles', articles)]
        return ans

    def load_complete(self, browser, url, rl):
        if self.time_initial_phase:
            browser.wait_for_element('footer.article-footer')
        return True

if __name__ == '__main__':
    # Test the login
    import sys
    from calibre import jsbrowser
    br = jsbrowser(default_timeout=120)
    do_login(br, sys.argv[-2], sys.argv[-1])
    br.show_browser()
